import { Injectable } from '@nestjs/common';
import { PartnerService } from '../partner/partner.service';

@Injectable()
export class AdminDashboardService {
  constructor(private partnerService: PartnerService) {}

  async getMetrics() {
    const totalPartners = await this.partnerService.getTotalPartnersCount();
    const activePartners = await this.partnerService.getActivePartnersCount();
    
    // Mock data for other metrics - in real implementation, these would come from database
    const pendingOnboardings = await this.getPendingOnboardingsCount();
    const manualReviewCases = await this.getManualReviewCasesCount();
    const documentsGeneratedLast24h = await this.getDocumentsGeneratedLast24h();
    
    const alerts = await this.getSystemAlerts();

    return {
      totalPartners,
      activePartners,
      pendingOnboardings,
      manualReviewCases,
      documentsGeneratedLast24h,
      alerts,
      lastUpdated: new Date().toISOString(),
    };
  }

  async getSystemHealth() {
    // Mock system health data
    return {
      status: 'healthy',
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      timestamp: new Date().toISOString(),
    };
  }

  async getPartnerActivity() {
    // Mock partner activity data
    return {
      recentSignups: await this.getRecentSignups(),
      activeToday: Math.floor(Math.random() * 50) + 10,
      averageOnboardingTime: '2.5 hours',
      conversionRate: '78%',
    };
  }

  private async getPendingOnboardingsCount(): Promise<number> {
    // Mock implementation - in real app, this would query onboarding records
    return Math.floor(Math.random() * 20) + 5;
  }

  private async getManualReviewCasesCount(): Promise<number> {
    // Mock implementation - in real app, this would query review cases
    return Math.floor(Math.random() * 10) + 2;
  }

  private async getDocumentsGeneratedLast24h(): Promise<number> {
    // Mock implementation - in real app, this would query document generation logs
    return Math.floor(Math.random() * 100) + 50;
  }

  private async getSystemAlerts() {
    const alerts = [];
    
    // Mock alerts based on metrics
    const manualReviewCases = await this.getManualReviewCasesCount();
    if (manualReviewCases > 8) {
      alerts.push({
        type: 'warning',
        message: `${manualReviewCases} casos aguardando revisão manual - considere priorizar`,
        timestamp: new Date().toISOString(),
      });
    }

    const pendingOnboardings = await this.getPendingOnboardingsCount();
    if (pendingOnboardings > 15) {
      alerts.push({
        type: 'info',
        message: `${pendingOnboardings} onboardings pendentes - fluxo normal`,
        timestamp: new Date().toISOString(),
      });
    }

    // Mock system alerts
    if (Math.random() > 0.8) {
      alerts.push({
        type: 'warning',
        message: 'API de compliance com latência elevada - monitorando',
        timestamp: new Date().toISOString(),
      });
    }

    return alerts;
  }

  private async getRecentSignups() {
    // Mock recent signups data
    const partners = await this.partnerService.findAll();
    return partners
      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
      .slice(0, 5)
      .map(partner => ({
        id: partner.id,
        name: partner.name,
        company: partner.company,
        createdAt: partner.createdAt,
        status: partner.status,
      }));
  }
}
